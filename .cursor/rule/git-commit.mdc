---
description: 
globs: 
alwaysApply: true
---
# Git 提交规范

## 提交信息格式

### 基本格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 简化格式（推荐日常使用）
```
<type>(<scope>): <subject>
```

## 提交类型（type）

### 主要类型
- **feat**: 新功能（feature）
- **fix**: 修复bug
- **docs**: 文档变更
- **style**: 代码格式（不影响代码运行的变动）
- **refactor**: 重构（既不是新增功能，也不是修复bug的代码变动）
- **test**: 增加测试
- **chore**: 构建过程或辅助工具的变动

### 扩展类型
- **perf**: 性能优化
- **ci**: 持续集成相关
- **build**: 构建系统或外部依赖的变动
- **revert**: 回滚之前的提交

## 作用域（scope）

### 后端项目作用域
- **core**: 核心模块相关
- **service**: 业务逻辑层相关
- **web**: 控制器层相关
- **config**: 配置相关
- **mapper**: 数据访问层相关
- **entity**: 实体类相关
- **dto**: 数据传输对象相关
- **vo**: 视图对象相关
- **util**: 工具类相关
- **exception**: 异常处理相关
- **security**: 安全相关
- **cache**: 缓存相关
- **db**: 数据库相关
- **api**: API接口相关

## 主题（subject）

### 规则
- 使用第一人称现在时，比如使用"change"而不是"changed"或"changes"
- 第一个字母小写
- 结尾不加句号（.）
- 控制在50个字符以内
- 使用中文描述，简洁明了

### 示例
```
feat(user): 添加用户注册功能
fix(login): 修复登录验证失败的问题
docs(readme): 更新项目文档
style(format): 统一代码格式
refactor(service): 重构用户服务逻辑
test(unit): 添加用户服务单元测试
chore(deps): 升级Spring Boot版本
```

## 正文（body）

### 规则
- 使用第一人称现在时
- 应该说明代码变动的动机，以及与以前行为的对比
- 每行不超过72个字符

### 示例
```
feat(user): 添加用户注册功能

- 实现用户注册接口
- 添加邮件验证功能
- 增加密码强度校验
- 集成短信验证码服务
```

## 页脚（footer）

### 不兼容变动
如果当前代码与上一个版本不兼容，则Footer部分以BREAKING CHANGE开头：

```
BREAKING CHANGE: 用户API接口变更，需要更新客户端代码
```

### 关闭Issue
如果当前提交针对某个Issue，那么可以在Footer部分关闭这个Issue：

```
Close #123
Fixes #456
Resolves #789
```

## 完整示例

### 新功能提交
```
feat(user): 添加用户管理模块

- 实现用户CRUD操作
- 添加用户权限控制
- 集成分页查询功能
- 支持用户状态管理

Close #123
```

### 修复Bug提交
```
fix(login): 修复JWT token过期验证问题

当token过期时，系统没有正确返回401状态码，
导致前端无法正确处理登录失效的情况。

修复了JwtAuthenticationEntryPoint中的逻辑判断，
确保token过期时返回正确的错误信息。

Fixes #456
```

### 重构提交
```
refactor(service): 优化用户服务层架构

- 抽取公共业务逻辑到BaseService
- 使用策略模式重构权限验证
- 优化数据库查询性能
- 简化异常处理逻辑
```

## 日常提交示例

### 功能开发
```
feat(auth): 添加JWT认证功能
feat(user): 实现用户信息修改接口
feat(role): 添加角色权限管理
feat(log): 实现操作日志记录
```

### Bug修复
```
fix(db): 修复数据库连接池配置错误
fix(api): 修复分页查询参数验证问题
fix(cache): 解决Redis缓存key冲突
fix(security): 修复权限验证绕过漏洞
```

### 文档更新
```
docs(api): 更新接口文档
docs(deploy): 添加部署说明
docs(config): 完善配置文件注释
```

### 代码优化
```
style(format): 统一代码格式和注释
refactor(controller): 简化控制器逻辑
perf(query): 优化用户查询性能
```

### 测试相关
```
test(unit): 添加用户服务单元测试
test(integration): 完善集成测试用例
```

### 配置变更
```
chore(deps): 升级MyBatis Plus到3.5.5
chore(config): 更新开发环境配置
build(maven): 添加新的依赖包
```

## 提交频率建议

### 建议提交的时机
- 完成一个完整的功能点
- 修复一个独立的bug
- 完成代码重构
- 添加或修改测试用例
- 更新文档
- 每日工作结束时的阶段性提交

### 避免的提交
- 包含多个不相关变更的提交
- 提交信息过于简单或模糊
- 包含临时或调试代码的提交
- 破坏构建的提交

## 分支管理建议

### 分支命名规范
- **feature/功能名称**: 新功能开发分支
- **fix/bug描述**: Bug修复分支
- **hotfix/紧急修复**: 紧急修复分支
- **release/版本号**: 发布分支

### 示例
```
feature/user-management
fix/login-validation
hotfix/security-patch
release/v1.2.0
```

## 工具配置

### 使用Conventional Commits
建议使用Conventional Commits规范，可以自动生成CHANGELOG和版本号。

### Git Hook配置
可以配置commit-msg hook来验证提交信息格式：

```bash
#!/bin/sh
# commit-msg hook example
commit_regex='^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .{1,50}'

if ! grep -qE "$commit_regex" "$1"; then
    echo "提交信息格式不正确！"
    echo "格式: type(scope): subject"
    echo "示例: feat(user): 添加用户注册功能"
    exit 1
fi
```

记住：良好的提交信息是团队协作的基础，有助于代码审查、问题追踪和项目维护。

