name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    name: Code Coverage Analysis
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: common_admin_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
            echo 'Waiting for MySQL to be ready...'
            sleep 5
          done

      - name: Run tests with coverage
        run: |
          cd common-admin-parent
          mvn clean test jacoco:report
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Generate coverage badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: common-admin-parent/target/site/jacoco/jacoco.csv
          badges-directory: .github/badges
          generate-coverage-badge: true
          generate-branches-badge: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./common-admin-parent/target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload JaCoCo coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: common-admin-parent/target/site/jacoco/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // 读取覆盖率数据
            const jacocoXmlPath = './common-admin-parent/target/site/jacoco/jacoco.xml';
            if (fs.existsSync(jacocoXmlPath)) {
              const jacocoXml = fs.readFileSync(jacocoXmlPath, 'utf8');
              
              // 简单解析覆盖率百分比（实际项目中可能需要更复杂的解析）
              const instructionMatch = jacocoXml.match(/type="INSTRUCTION"[^>]*covered="(\d+)"[^>]*missed="(\d+)"/);
              const branchMatch = jacocoXml.match(/type="BRANCH"[^>]*covered="(\d+)"[^>]*missed="(\d+)"/);
              const lineMatch = jacocoXml.match(/type="LINE"[^>]*covered="(\d+)"[^>]*missed="(\d+)"/);
              
              if (instructionMatch && branchMatch && lineMatch) {
                const instructionCovered = parseInt(instructionMatch[1]);
                const instructionMissed = parseInt(instructionMatch[2]);
                const instructionTotal = instructionCovered + instructionMissed;
                const instructionCoverage = instructionTotal > 0 ? (instructionCovered / instructionTotal * 100).toFixed(2) : 0;
                
                const branchCovered = parseInt(branchMatch[1]);
                const branchMissed = parseInt(branchMatch[2]);
                const branchTotal = branchCovered + branchMissed;
                const branchCoverage = branchTotal > 0 ? (branchCovered / branchTotal * 100).toFixed(2) : 0;
                
                const lineCovered = parseInt(lineMatch[1]);
                const lineMissed = parseInt(lineMatch[2]);
                const lineTotal = lineCovered + lineMissed;
                const lineCoverage = lineTotal > 0 ? (lineCovered / lineTotal * 100).toFixed(2) : 0;
                
                const coverageComment = `
            ## 📊 代码覆盖率报告
            
            | 类型 | 覆盖率 | 覆盖数 / 总数 |
            |------|--------|---------------|
            | 🎯 指令覆盖率 | ${instructionCoverage}% | ${instructionCovered} / ${instructionTotal} |
            | 🌿 分支覆盖率 | ${branchCoverage}% | ${branchCovered} / ${branchTotal} |
            | 📝 行覆盖率 | ${lineCoverage}% | ${lineCovered} / ${lineTotal} |
            
            ### 📈 覆盖率状态
            ${instructionCoverage >= 80 ? '✅ 优秀' : instructionCoverage >= 70 ? '⚠️ 良好' : '❌ 需要改进'}
            
            > 💡 **建议**: ${instructionCoverage < 70 ? '请增加单元测试来提高代码覆盖率' : '代码覆盖率良好，继续保持！'}
            
            🔗 [查看详细报告](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                `;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: coverageComment
                });
              }
            }

      - name: Coverage Quality Gate
        run: |
          cd common-admin-parent
          # 提取覆盖率百分比并检查是否达到最低要求
          COVERAGE=$(grep -o 'instruction.*>[0-9]*%' target/site/jacoco/index.html | grep -o '[0-9]*' | head -1)
          echo "Code coverage: $COVERAGE%"
          
          if [ "$COVERAGE" -lt 70 ]; then
            echo "❌ 代码覆盖率($COVERAGE%)低于最低要求(70%)"
            exit 1
          else
            echo "✅ 代码覆盖率($COVERAGE%)符合要求"
          fi 